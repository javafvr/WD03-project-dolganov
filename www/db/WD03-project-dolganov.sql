-- phpMyAdmin SQL Dump
-- version 4.7.7
-- https://www.phpmyadmin.net/
--
-- Хост: 127.0.0.1:3306
-- Время создания: Авг 02 2018 г., 05:40
-- Версия сервера: 5.6.38
-- Версия PHP: 5.5.38

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- База данных: `WD03-project-dolganov`
--

-- --------------------------------------------------------

--
-- Структура таблицы `about`
--

CREATE TABLE `about` (
  `id` int(11) NOT NULL,
  `name` varchar(255) NOT NULL,
  `description` text NOT NULL,
  `firstname` varchar(191) DEFAULT NULL,
  `photo` varchar(191) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `about`
--

INSERT INTO `about` (`id`, `name`, `description`, `firstname`, `photo`) VALUES
(1, 'Дмитрий Долганов', '<p>&nbsp;</p>\r\n\r\n<p>Я веб-разработчик из Тюмени. Занимаюсь разработкой современных сайтов и приложений. Мне нравится делать интересные и современные проекты.</p>\r\n\r\n<p>Этот сайт я сделал в рамках обучения в школе онлайн обучения WebCademy.<br />\r\nЧуть позже я освежу в нём свой контент. А пока посмотрите, как тут всё классно и красиво!</p>\r\n\r\n<h3>Что я умею</h3>\r\n\r\n<p>Меня привлекет Frontend разработка, это не только моя работа, но и хобби.</p>\r\n\r\n<p>Также знаком и могу решать не сложные задачи на Backend.</p>\r\n', 'Дмитрий Долганов', '-474466800.jpg');

-- --------------------------------------------------------

--
-- Структура таблицы `categories`
--

CREATE TABLE `categories` (
  `id` int(11) UNSIGNED NOT NULL,
  `cat_title` varchar(191) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;

--
-- Дамп данных таблицы `categories`
--

INSERT INTO `categories` (`id`, `cat_title`) VALUES
(1, 'Путешествия'),
(2, 'PHP'),
(3, '3D Печать'),
(4, 'Java script'),
(5, 'Работа'),
(10, 'Java'),
(14, 'Python'),
(15, 'Мероприятия');

-- --------------------------------------------------------

--
-- Структура таблицы `comments`
--

CREATE TABLE `comments` (
  `id` int(11) UNSIGNED NOT NULL,
  `post_id` int(11) UNSIGNED DEFAULT NULL,
  `user_id` int(11) UNSIGNED DEFAULT NULL,
  `text` varchar(191) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  `date_time` datetime DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;

--
-- Дамп данных таблицы `comments`
--

INSERT INTO `comments` (`id`, `post_id`, `user_id`, `text`, `date_time`) VALUES
(1, 32, 1, 'аваываывап', '2018-07-26 10:22:51'),
(2, 32, 1, 'аваываывап', '2018-07-26 10:22:54'),
(3, 32, 1, 'ирсарвпы', '2018-07-26 11:21:43'),
(4, 32, 1, 'dsfsdfgdfhfd', '2018-07-26 11:46:41'),
(5, 32, 1, 'Тестовый коммент от диванного эксперта!! :)', '2018-07-26 11:47:11'),
(6, 32, 1, 'аавпваыпвыаывфаыфваываыв\r\n', '2018-07-26 14:28:11'),
(7, 22, 1, '55555', '2018-07-26 14:34:05'),
(8, 22, 1, 'Дикий комментатор', '2018-07-26 14:34:24'),
(9, 32, 1, 'оорждл\r\n', '2018-07-28 20:48:06'),
(10, 32, 1, 'это фотошоп\r\n', '2018-07-28 20:48:36');

-- --------------------------------------------------------

--
-- Структура таблицы `contacts`
--

CREATE TABLE `contacts` (
  `id` int(11) NOT NULL,
  `email` varchar(191) DEFAULT NULL,
  `phone` double DEFAULT NULL,
  `address` varchar(191) DEFAULT NULL,
  `firstname` varchar(191) DEFAULT NULL,
  `lastname` varchar(191) DEFAULT NULL,
  `vk` varchar(191) DEFAULT NULL,
  `fb` varchar(191) DEFAULT NULL,
  `github` varchar(191) DEFAULT NULL,
  `twitter` varchar(191) DEFAULT NULL,
  `skype` varchar(191) DEFAULT NULL,
  `codepen` varchar(191) DEFAULT NULL,
  `instagram` varchar(191) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `contacts`
--

INSERT INTO `contacts` (`id`, `email`, `phone`, `address`, `firstname`, `lastname`, `vk`, `fb`, `github`, `twitter`, `skype`, `codepen`, `instagram`) VALUES
(1, 'inet72@gmail.com', 79091824169, '625000 Россия, г. Тюмень', 'Дмитрий', 'Долганов', 'https://vk.com/id1908108', 'https://www.facebook.com/scriptolog', 'https://github.com/javafvr', '', 'dolganovdn', 'https://codepen.io/inet72', 'https://www.instagram.com/?hl=ru');

-- --------------------------------------------------------

--
-- Структура таблицы `jobs`
--

CREATE TABLE `jobs` (
  `id` int(11) UNSIGNED NOT NULL,
  `period` varchar(191) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  `title` varchar(191) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  `description` varchar(255) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;

--
-- Дамп данных таблицы `jobs`
--

INSERT INTO `jobs` (`id`, `period`, `title`, `description`) VALUES
(1, 'февраль 2017 &mdash; по настоящее время', 'Удалить Frontend разработчик, Вконтактe, mail.ru group', 'Работы в команде Вконтакте. Работал в команде над обновление сервиса Музыка, работа над видео разделом. Создание видеоплеера. Создание кроссбраузерных компонентов. Работа над оптимизацией скорости загрузки медиа контента.'),
(2, 'февраль 2017 &mdash; по настоящее время', 'Frontend разработчик, Вконтактe, mail.ru group', 'Работы в команде Вконтакте. Работал в команде над обновление сервиса Музыка, работа над видео разделом. Создание видеоплеера. Создание кроссбраузерных компонентов. Работа над оптимизацией скорости загрузки медиа контента.'),
(3, 'февраль 2017 &mdash; по настоящее время', 'Frontend разработчик, Вконтактe, mail.ru group', 'Работы в команде Вконтакте. Работал в команде над обновление сервиса Музыка, работа над видео разделом. Создание видеоплеера. Создание кроссбраузерных компонентов. Работа над оптимизацией скорости загрузки медиа контента.');

-- --------------------------------------------------------

--
-- Структура таблицы `messages`
--

CREATE TABLE `messages` (
  `id` int(11) UNSIGNED NOT NULL,
  `firstname` varchar(191) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  `email` varchar(191) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  `message` text COLLATE utf8mb4_unicode_520_ci,
  `date_time` datetime DEFAULT NULL,
  `message_filename_original` varchar(191) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  `message_filename` varchar(191) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;

--
-- Дамп данных таблицы `messages`
--

INSERT INTO `messages` (`id`, `firstname`, `email`, `message`, `date_time`, `message_filename_original`, `message_filename`) VALUES
(1, 'Дмитрий', 'inet@gmail.com', 'Wake up Neo..\r\nYou obosralso!', '2018-07-30 14:55:15', NULL, NULL),
(2, 'White rabbit', '123@mail.com', 'Matrix has you', '2018-07-30 15:21:27', NULL, NULL),
(9, 'Сергей Петрович', 'javafvr@yahoo.com', 'Lorem ipsum dolor sit amet, consectetur adipisicing elit. In inventore laudantium porro ut illum obcaecati aspernatur quis, distinctio adipisci, numquam dolorum a, eligendi at ipsum ullam asperiores! Quibusdam totam, eaque.Lorem ipsum dolor sit amet, consectetur adipisicing elit. In inventore laudantium porro ut illum obcaecati aspernatur quis, distinctio adipisci, numquam dolorum a, eligendi at ipsum ullam asperiores! Quibusdam totam, eaque.Lorem ipsum dolor sit amet, consectetur adipisicing elit. In inventore laudantium porro ut illum obcaecati aspernatur quis, distinctio adipisci, numquam dolorum a, eligendi at ipsum ullam asperiores! Quibusdam totam, eaque.Lorem ipsum dolor sit amet, consectetur adipisicing elit. In inventore laudantium porro ut illum obcaecati aspernatur quis, distinctio adipisci, numquam dolorum a, eligendi at ipsum ullam asperiores! Quibusdam totam, eaque.', '2018-07-31 21:38:22', '_G4A3282.jpg-550x0.jpg', '1192803213.jpg');

-- --------------------------------------------------------

--
-- Структура таблицы `posts`
--

CREATE TABLE `posts` (
  `id` int(11) UNSIGNED NOT NULL,
  `title` varchar(191) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  `text` text COLLATE utf8mb4_unicode_520_ci,
  `author_id` int(11) UNSIGNED DEFAULT NULL,
  `date_time` datetime DEFAULT NULL,
  `post_img` varchar(191) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  `post_img_small` varchar(191) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  `category` int(11) UNSIGNED DEFAULT NULL,
  `update_time` datetime DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;

--
-- Дамп данных таблицы `posts`
--

INSERT INTO `posts` (`id`, `title`, `text`, `author_id`, `date_time`, `post_img`, `post_img_small`, `category`, `update_time`) VALUES
(16, 'Простой редактор изображений на VueJS', 'Недавно мне выпала возможность написать сервис для интернет-магазина, который помогал бы оформить заказ на печать своих фото.\r\n\r\nСервис предполагал наличие &laquo;простого&raquo; редактора изображений, созданием которого, я бы хотел поделиться. А все потому, что среди обилия всевозможных плагинов я не нашел подходящего функционала, к тому же, нюансы CSS трансформаций, неожиданно стали для меня весьма нетривиальной задачей.\r\n\r\nimage\r\n\r\nОсновные задачи:\r\n\r\nВозможность загрузки изображений с устройства, Google Drive и Instagram.\r\nРедактирование изображения: перемещение, вращение, отражение по горизонтали и вертикали, зуммирование, автоматическое выравнивание изображения для заполнения области кропа.\r\n\r\nЕсли тема окажется интересной, в следующей публикации я детально опишу интеграцию с Google Drive и Instagram в backend-части приложения, где была использована популярная связка NodeJS+Express.\r\n\r\nДля организации frontend-a я выбрал замечательный фреймворк Vue. Просто потому что он меня вдохновляет после тяжелого Angular и надоевшего React. Думаю, нет смысла описывать архитектуру, роуты и прочие компоненты, перейдем сразу к редактору.\r\n\r\nКстати, демку редактора можно потыкать здесь.\r\n\r\nНам понадобится два компонента:\r\n\r\nEdit &mdash; будет содержать основную логику и элементы управления\r\nPreview &mdash; будет отвечать за отображение картинки\r\n\r\nШаблон компонента Edit:\r\nКомпонент Preview может тригерить 3 события:\r\n\r\nloaded &mdash; событие загрузки изображения\r\nresized &mdash; событие изменения размеров окна\r\nmoved &mdash; событие перемещения картинки\r\n\r\nПараметры:\r\n\r\nimage &mdash; ссылка на изображение\r\nmatrix &mdash; матрица трансформации для CSS-свойства transform\r\ntransform &mdash; объект, описывающий трансформации \r\n\r\nВ целях лучшего контроля над положением изображения, img имеет абсолютное позиционирование, а свойству transform-origin, опорной точке трансформации, задано начальное значение &ldquo;0 0&rdquo;, что соответствует началу координат в верхнем левом углу исходного (до трансформации!) изображения.\r\n\r\nОсновная проблема, с которой я столкнулся &mdash; нужно следить, чтобы точка transform-origin всегда была в центре области редактирования, иначе, при трансформациях, выделенная часть изображения будет смещаться. Эту задачу помогает решить использование матрицы трансформации.\r\n\r\nКомпонент Edit\r\n\r\nСвойства компонента Edit:\r\nЗначения imageRect и areaRect нам передает компонент Preview, вызывая методы imageLoaded и areaResized, соответственно, объекты имеют структуру:\r\n\r\n{\r\n  size: { width: 100, height: 100 },\r\n  center: { x: 50, y: 50 }\r\n}\r\n\r\nЗначения center можно было бы каждый раз вычислять, но проще их записать один раз.\r\n\r\nВычисляемое свойство matrix &mdash; это те самые коэффициенты матрицы трансформации.\r\n\r\nПервая задача, которую нужно решить &mdash; это отцентровать в области кропа изображение с произвольным соотношением сторон, при этом, изображение должно иметь возможность поместиться полностью, незаполненные области (только) сверху и снизу, или (только) слева и справа &mdash; допустимы. При любых трансформациях это условие должно сохраняться.\r\n\r\nВо-первых, ограничим значения для зуммирования, для этого будем проверять соотношения сторон, учитывая ориентацию изображения.\r\n\r\nМетоды компонента:\r\nТеперь перейдем к трансформациям. Для начала, опишем отражения, ибо они не смещают видимую область изображения.\r\n\r\nМетоды компонента:\r\nТрансформации зуммирования, вращения и смещения, уже потребуют корректировки transform-origin.\r\n\r\nМетоды компонента:\r\nИменно на методе _translate лежит ответственность за все тонкости трансформаций. Нужно предствить две системы отсчета. Первая, назвем ее нулевой, начинается в верхнем левом углу изображения, при умножении кординат на матрицу трансформации, мы переходим в другую систему кординат, назовем ее локальной. В таком случае обратный переход, от локальной к нулевой, мы можем осуществить, найдя обратную матрицу преобразования.\r\n\r\nВыходит, нам нужны две функции. \r\n\r\nПервая &mdash; для перехода с нулевой в локальную систему, такие же преобразования выполняет браузер, когда мы указываем css-свойство transform.\r\n\r\nimg {\r\n    transform: matrix(a, b, c, d, tx, ty);\r\n}\r\n\r\nВторая &mdash; для нахождения оригинальных координат изображения, имея уже трансформированные кординаты.\r\n\r\nУдобнее всего записать эти функции методами отдельного класса.\r\n\r\nКласс Transform:\r\nМетод _translate с подробными комментариями:\r\nВыравнивание создает эффект &laquo;прилипания&raquo; изображения к краям области кропа, не допуская пустых полей.\r\n\r\nКомпонент Preview\r\n\r\nОсновная задача этого компонента &mdash; отобразить картинку, применить трансформации и реагировать на перемещение зажатой над изображением, кнопки мыши. Вычисляя смещение, мы обновляем параметры transform.x и transform.y, при завершении движения &mdash; триггерим событие moved, сообщая компоненту Edit о том, что нужно заново просчитать положение центра трансформации и скорректировать transform.x и transform.y.\r\n\r\nШаблон компонента Preview:\r\nФункционал редактора аккуратно отделен от основного проекта и лежит здесь.\r\n\r\nНадеюсь, для Вас данный материал будет полезен. Спасибо!', 1, '2018-07-23 21:18:14', '1081675599.jpg', 'small-1081675599.jpg', 3, NULL),
(17, 'API CSS Paint', 'По словам автора материала, перевод которого мы публикуем сегодня, API CSS Paint &mdash; это невероятно интересная технология. Причём, речь идёт не только о её текущих возможностях, но и о представляемых ей явлениях, и о том, что её возникновение знаменует собой начало весьма примечательных изменений в мире CSS. Здесь мы поговорим об API CSS Paint и о причинах его появления, расскажем о том, как им пользоваться.\r\n\r\n\r\n\r\nЧто такое API CSS Paint?\r\n\r\nAPI, о котором идёт речь, представляет собой всего лишь небольшую часть нового набора спецификаций, работа над которыми ведётся в рамках проекта CSS Houdini. Если в двух словах охарактеризовать этот проект, то его суть сводится к тому, что он даёт разработчикам низкоуровневый доступ к внутренним механизмам CSS.\r\n\r\nAPI CSS Paint позволяет вызывать функцию paint() в ситуациях, когда в обычных условиях работа велась бы, например, с неким значением, описывающим какое-то изображение. Обычный пример подобного &mdash; это свойство background-image, при работе с которым можно использовать функцию url() для передачи системе ссылки на файл изображения:\r\n\r\narea {\r\n  background-image: url(\'assets/myimage.jpg\');\r\n}\r\n\r\nAPI CSS Paint позволяет вызывать, вместо подобной функции, функцию paint(), и передавать ей так называемый ворклет (worklet), описанный средствами JavaScript. Ворклет можно воспринимать как некий фрагмент кода, который позволяет разработчику программно рисовать практически всё, что ему захочется. И, так как речь идёт о JavaScript, изображение можно сделать динамическим. Сам по себе этот API очень похож на API Canvas HTML5 и сейчас мы поговорим о том, как всё это работает.\r\n\r\nОсобенности API CSS Paint\r\n\r\nЕсли сейчас у вас появилось ощущение, что звучит всё это хорошо, но выглядит сложно, и вы думаете о том, что вас вполне устраивает использование обычных изображений, учтите, что обычные изображения с приходом новой технологии актуальности не теряют. Использовать их, так же, как это делалось всегда &mdash; это совершенно нормально. То, что на горизонте появилось что-то новое, и, вероятно, перспективное, не означает, что всем тут же надо использовать это новое для решения всех существующих задач. Однако, обычные изображения статичны. Новый API привлекает идеей создания динамических изображений.\r\n\r\nПоразмыслим о CSS-функции linear-gradient. Штука это очень мощная. Взгляните, например, на это. Но можете ли вы представить себе насколько легче было бы добиться такого же эффекта, формируемого наложением слоёв, если не пришлось бы использовать множество фоновых изображений? Однако, дело не только в этом. Если углубиться в API CSS Paint, можно разобраться с тем, как подобные изображения создаются во время выполнения программы, а это может оказаться весьма полезным (собственно говоря, этим мы и планируем тут заняться).\r\n\r\nА как насчёт CSS-функции conic-gradient? Она, можно сказать, пока не поддерживается браузерами без полифилла. Использование нового API позволяет создавать конические градиенты, настраивать их параметры, которые не особенно отличаются от того, что есть в спецификации. Всё это значит, что на практике, пользуясь новым API, вы сможете создавать собственные нативные полифиллы. А это &mdash; просто замечательно.\r\n\r\nНе забывайте о том, что всё это является частью более объёмной группы возможностей, известной как CSS Houdini. Вот что об этом написано в документации проекта: &laquo;Цель CSS-TAG Houdini Task Force (CSS Houdini) заключается в том, чтобы совместно разрабатывать механизмы, которые срывают покровы таинственности с технологий стилизации веб-страниц и построения их макетов&raquo;.\r\n\r\nХорошо звучит, правда? И, на самом деле, эти новые механизмы нацелены на то, чтобы позволить разработчикам расширять функциональность самого CSS, давая им более совершенные средства управления стилями, кросс-браузерную поддержку и возможности создания полифиллов.\r\n\r\nПроцесс стандартизации новых технологий может занять определённое время. Сначала делается предложение новой возможности CSS. Далее &mdash; пишется спецификация, происходят другие процессы. В итоге производители браузеров реализуют новые спецификации. И, так как разработчикам часто не терпится как можно скорее приступить к использованию новых возможностей, им приходится принимать во внимание то, что старые браузеры могут не поддерживать новшества, и то, что если некая спецификация пока не полностью реализована, она может, в ходе своего развития, серьёзно измениться. Пожалуй, нечего и говорить о типичных нюансах реализации разных технологий в различных браузерах. Проект Houdini может зайти довольно далеко в смягчении этих проблем, позволяя нам разрабатывать браузерную функциональность самостоятельно, пользоваться ей и спокойно ждать появления реализации тех или иных возможностей производителями браузеров. Вот пара материалов на эту тему. Первый посвящён сильным сторонам Houdini, а второй &mdash; использованию возможностей этого проекта для создания сложной анимации.\r\n\r\nПоддержка API CSS Paint браузерами\r\n\r\nМожно ли пользоваться API CSS Paint уже сегодня? На этот вопрос можно дать положительный ответ, хотя надо отметить, что поддерживают эту технологию пока далеко не все браузеры. Для того чтобы получить сведения о поддержке данного API, можете воспользоваться ресурсом caniuse.com.\r\n\r\n\r\n\r\nПоддержка API CSS Paint различными браузерами (июль 2018 года)\r\n\r\nКак видите, этот API поддерживает пока лишь Chrome. Но, как бы там ни было, давайте поговорим о том, как им пользоваться. Мы рассмотрим программные конструкции, необходимые для обеспечения работы нового API. Сюда входят и новые возможности CSS, и некоторые довольно свежие механизмы JavaScript. Наш пример будет разбит на три шага.\r\n\r\nШаг №1: CSS\r\n\r\nНапомним, что за формирование изображения при использовании API CSS Paint отвечают ворклеты &mdash; фрагменты JS-кода. Поэтому нам, для начала, нужно дать ворклету имя и вызывать его в CSS. Назовём его awesomePattern. В результате CSS-код будет выглядеть так:\r\n\r\nsection {\r\n  background-image: url(\'fallback.png\');\r\n  background-image: paint(awesomePattern);\r\n};\r\n\r\nПредварительные приготовления завершены, но, пока не окажутся готовыми остальные части нашего примера, всё это работать не будет.\r\n\r\nШаг №2: JavaScript\r\n\r\nТеперь нам нужно описать ворклет средствами JS. Здесь показано, как, в главном скрипте, осуществляется загрузка другого скрипта, реализующего необходимый нам функционал.\r\n\r\nCSS.paintWorklet.addModule(\'patternWorklet.js\');\r\n\r\nНа данном, этапе, опять же, ничего не происходит, так как самое интересное скрыто в файле patternWorklet.js.\r\n\r\nВ файле patternWorklet.js нам нужно зарегистрировать класс ворклета:\r\n\r\nregisterPaint(\'awesomePattern\', Shape);\r\n\r\nЗдесь мы вызываем функцию registerPaint() и передаём ей то, что мы считаем ворклетом, в данном случае &mdash; это awesomePattern. Кроме того, мы передаём этой функции ссылку на класс, который мы ещё напишем, в данном случае &mdash; Shape. Эту команду надо добавить после объявления соответствующего класса. При объявлении и использовании классов нельзя полагаться на нечто вроде механизма подъёма объявлений функций. Прежде чем можно будет использовать класс, его необходимо объявить.\r\n\r\nДалее, мы собираемся использовать синтаксис объявления классов ECMAScript 2015 и написать класс, который и будет рисовать фоновое изображение. Так как сейчас этот класс зарегистрирован в качестве класса ворклета, мы можем пользоваться в нём некоторыми специальными механизмами, которые будут доступны в нём автоматически.\r\n\r\nclass Shape {\r\n  paint(ctx, geom, properties) {\r\n\r\n    ctx.strokeStyle = \'white\';\r\n    ctx.lineWidth = 4;\r\n    ctx.beginPath();\r\n    ctx.arc( 200, 200, 50, 0, 2*Math.PI);\r\n    ctx.stroke();\r\n    ctx.closePath();\r\n\r\n  }\r\n}\r\n\r\nВ коллбэке paint() имеются параметры ctx, geom и properties. Параметр ctx &mdash; это то же самое, что и контекст 2D-рендеринга, который можно получить от элемента &lt;canvas&gt;. Ну, это почти то же самое. Дело в том, что элемент &lt;canvas&gt; позволяет считывать пиксельные данные, а вот API CSS Paint такого не позволяет. Несмотря на отличия, используя ctx, мы можем применять те же методы вывода графических объектов, которые применяются при работе с элементом &lt;canvas&gt;. В этом примере с помощью функции arc() мы рисуем круг.\r\n\r\nПервые два значения, передаваемые функции arc() &mdash; это координаты X и Y центра круга, в пикселях, относительно начала координат, расположенного в левом верхнем углу элемента. Однако мне хочется, чтобы круг оказался бы по центру элемента. Для решения этой задачи нам пригодится параметр geom. Он даёт доступ к объекту PaintSize, который представляет собой описание параметров изображения. В частности, обращаясь к нему, мы можем прочитать параметры width и height, а это &mdash; именно то, что нам нужно для того, чтобы отцентровать круг.\r\n\r\nВ результате мы придём к такому коду:\r\n\r\nclass Shape {\r\n  paint(ctx, geom, properties) {\r\n    \r\n    let x = geom.width/2;\r\n    let y = geom.height/2;\r\n\r\n    ctx.strokeStyle = \'white\';\r\n    ctx.lineWidth = 4;\r\n    ctx.beginPath();\r\n    ctx.arc(x, y, 50, 0, 2*Math.PI);\r\n    ctx.stroke();\r\n    ctx.closePath();\r\n    \r\n  }\r\n}\r\nregisterPaint(\'awesomePattern\', Shape);\r\n\r\nПосмотреть работающий вариант примера можно на CodePen. Собственно говоря, вот что выводит этот код.\r\n\r\n\r\n\r\nКруг, созданный средствами API CSS Paint\r\n\r\nВсё это хорошо, но наш пример очень уж прост. Давайте, вместо обычного круга, нарисуем что-нибудь поинтереснее. Например &mdash; такую вот звёздочку &mdash; логотип сайта css-tricks.com.\r\n\r\n\r\n\r\nЗвёздочка, созданная средствами API CSS Paint\r\n\r\nВот проект на CodePen, который позволяет это сделать.\r\n\r\nКогда будете смотреть JS-код этого проекта, обратите внимание на метод drawStar() и на множество функций, таких же, которые используются при работе с элементом &lt;canvas&gt;.\r\n\r\nШаг №3: пользовательские свойства CSS\r\n\r\nИспользуя новую технологию, мы можем пойти гораздо дальше рисования кругов и звёздочек. Мы можем обратиться к мощным возможностям пользовательских свойств CSS (переменных). Они, кстати, даже сами по себе, весьма интересны. В нашем же случае они оказываются особенно полезными.\r\n\r\nПредположим, мы хотим получить возможность менять размер или цвет ранее созданного логотипа. Эти параметры можно поместить в CSS-код в виде пользовательских свойств, после чего задействовать их в программе через третий параметр, передаваемый коллбэку paint(). Речь идёт о параметре properties.\r\n\r\nДобавим в наш CSS-код свойство --star-scale, которое направлено на управление изменением размера изображения, и свойство --star-color, предназначенное для организации изменения цвета логотипа прямо в CSS. Вот что у нас получилось:\r\n\r\nsection {\r\n  --star-scale: 2;\r\n  --star-color: hsla(200, 50%, 50%, 1);\r\n  background-image: paint(awesomePattern)\r\n};\r\n\r\nТеперь вернёмся в класс ворклета. Тут нам надо взаимодействовать с вышеописанными пользовательскими свойствами. Делается это с помощью метода inputProperties, который даёт нам доступ ко всем CSS-свойствам и назначенным им значениям.\r\n\r\nstatic get inputProperties() { return [\'--star-scale\',\'--star-color\']; }\r\n\r\nТеперь работать с ними можно в методе paint():\r\n\r\nconst size = parseInt(properties.get(\'--shape-size\').toString());\r\n\r\nЕстественно, полученные значения допустимо использовать в коде, ответственном за формирование изображения. Это ведёт к тому, что если мы, в CSS-коде, поменяем значение свойства --star-scale или --start-color, это тут же отразится на том, как будет выглядеть изображение.\r\n\r\nimage\r\n\r\nВлияние пользовательских свойств CSS на готовое изображение\r\n\r\nЭтот функционал реализован в том же проекте на CodePen, который мы упоминали выше.\r\n\r\nКстати, стоит отметить, что при использовании нового API все обычные CSS-свойства, касающиеся настройки фона элементов, такие, как background-size и background-repeat, будут работать так же, как и раньше. Они не потеряли актуальности.\r\n\r\nИтоги\r\n\r\nAPI CSS Paint &mdash; это весьма мощная технология, возможности которой не ограничиваются созданием фоновых изображений. \r\n\r\nПредставьте, что у элемента должна быть особая граница, например, такая, которая видна не полностью, или двойная. Возможно, для достижения подобных эффектов вы обычно используете псевдоэлементы ::before или ::after, а может быть &mdash; специально настроенную тень box-shadow. Границы (и многое другое) можно реализовать средствами API CSS Paint и свойства border-image.\r\n\r\nAPI CSS Paint собирает воедино множество замечательных механизмов, таких, как ворклеты, классы ECMAScript 2015 и возможности элемента &lt;canvas&gt;. Кроме того, оно даёт разработчику средства программного управления созданием изображений, основанные на JavaScript. Например, воспользовавшись механизмом событий, можно организовать обновление пользовательских свойств, а значит &mdash; самого изображения, как, например, сделано здесь, где событие click запускает процесс обновления свойств в функции requestAnimationFrame, что позволяет создавать анимацию каждый раз, когда пользователь щёлкает по кнопке. Причём, во внимание принимаются даже координаты указателя мыши при щелчке.\r\n\r\nНа первый взгляд всё это может показаться слегка запутанным, но давайте взглянем на некоторые другие части проекта Houdini, с которыми мы можем встретиться:\r\n\r\nAPI CSS Layout позволяет разработчику делать нечто вроде display: layout(\'myCustomLayout\'). Типичный пример &mdash; это создание собственных макетов в стиле библиотеки Masonry, но диапазон использования этой возможности гораздо шире.\r\nAPI CSS Properties and Values даёт возможность задавать типы пользовательских свойств.\r\nAPI CSS Animation Worklet выводит операции по обработке анимации за пределы главного потока, что должно выразиться в виде идеально плавных анимаций.\r\n\r\nВ результате можно сказать, что, буквально у нас на глазах, происходит появление технологий, которые открывают веб-разработчикам множество новых возможностей. Процессы их стандартизации и реализации в браузерах идут не так уж и быстро, но они, вполне возможно, окажут огромнейшее влияние на всё, что связано со стилизацией веб-страниц.\r\n\r\nУважаемые читатели! Какие направления применения API CSS Paint кажутся вам наиболее интересными?\r\n', 1, '2018-07-23 21:19:59', '-134027294.jpeg', 'small--134027294.jpeg', 10, NULL),
(18, 'Box-shadows.css', 'Всем привет!\r\n\r\nВ современном дизайне, при создании сайтов и приложений, многие разработчики применяют эффект глубины и объема, нередко обращаясь к таким css свойствам как box-shadow и drop-shadow. Некоторые считают, что в 2018 году это тренд. И действительно, немало как иностранных, так и российских сайтов, которые в 2018 году стали чаще применять тени.\r\n\r\nВ связи с этим, недавно появилась небольшая коллекция простых и приятных css теней, часто встречающихся на сайтах (плюс &mdash; минус пара пикселей в сторону). Коллекция так и называется &mdash; Box-shadows.css. Она уже получила несколько положительных отзывов в сети и недавно была обновлена до версии 1.0.4, в которой появилось еще несколько красивых теней, разделенных на группы. \r\n\r\nПосле последнего обновления, коллекция стала содержать более 60 актуальных вариантов теней, которые отлично подходят для использования в таблицах, для содержимого домашних страниц, контейнеров, панели навигации и других блоков вашего сайта.\r\n\r\nОсновная цель создания этой коллекции &mdash; облегчение работы начинающим веб-дизайнерам и разработчикам в создании приятного и современного дизайна. Благодаря коллекции, вы сможете упростить работу с блоками и сократить время подбора css теней в генераторе (который, кстати, тоже имеется). Конечно, опытным разработчикам она вряд ли понадобится, но может и они почерпнут для себя что-нибудь интересное. Коллекция пригодится тем, кто еще не успел полностью углубиться в верстку, но хочет создать красивые тени на кнопках, блоках и контейнерах своего сайта. \r\n\r\nПодключение стилей\r\n\r\nЧтобы подключить таблицу стилей, перейдите на сайт проекта и скачайте нужный вам файл. Затем, подключите файл к вашей html странице, после открывающего тега &lt;head&gt; удобным для вас методом.\r\n\r\n&lt;head&gt;\r\n  &lt;link rel=&quot;stylesheet&quot; href=&quot;/box-shadows.css&quot;&gt;\r\n  &lt;!-- or --&gt;\r\n  &lt;link rel=&quot;stylesheet&quot; href=&quot;/box-shadows.min.css&quot;&gt;\r\n&lt;/head&gt;\r\n\r\nВы можете использовать генератор файла min.css, который позволит вам создать собственный файл, состоящий только из выбранных классов. Ну, или просто выбрать нужный вам блок и скопировать понравившуюся тень к своему сайту. Это поможет снизить нагрузку, если ваш проект использует менее двух или трех теней. Просто следуйте инструкциям на сайте и у вас все получится.\r\n\r\nИспользование классов\r\n\r\nЧтобы подключить нужную тень к вашему блоку, просто добавьте в него класс .bShadow с нужным номером:\r\n\r\n&lt;div class=&quot;bShadow-54&quot;&gt;&lt;/div&gt;\r\n\r\nЭффекты при наведении\r\n\r\nЧтобы создать вашему блоку эффект при наведении, добавьте понравившийся класс с номером, например, .bShadow-1 и напишите после цифры латинскую букву h. Например:\r\n\r\n&lt;div class=&quot;bShadow-38 bShadow-1h&quot;&gt;&lt;/div&gt;\r\n\r\nПосмотрите на примере класса .bShadow. При наведении он присваивает теневые значения соседнего класса .bShadow-1. Если вы хотите, чтобы при наведении или клике тень не появлялась, добавьте класс .bSnone\r\n\r\nПлавная трансформация и анимация\r\n\r\nКласс .bShadow по умолчанию использует плавную анимацию в .2s transition: transform 0.2s ease-in-out, а также включает свойство, которое предупреждает браузер о предстоящей трансформации тени и позиции will-change: transform, box-shadow;.\r\n\r\nИспользуйте это, чтобы сделать красивую анимацию ваших блоков. Например, вы можете добавить свой класс или свойства с трансформацией:\r\n\r\n.transform-translateY-5:hover {\r\n  -webkit-transform: translateY(-5px) translateZ(0);\r\n  transform: translateY(-5px) translateZ(0);\r\n}\r\n\r\nЗатем, добавьте в нужный вам контейнер:\r\n\r\n&lt;div class=&quot;bShadow transform-translateY-5 bShadow-1h&quot;&gt;ваш текст&lt;/div&gt; и вы увидите результат\r\n\r\nДобавление параметра inset\r\n\r\nЧтобы добавить параметр внутренней тени, просто вставьте скрипт на страницу html и укажите в нем классы, для которых вы хотите применить его.\r\n\r\nНапример .bShadow-1. Чтобы указать несколько классов, разделяйте их запятыми, как в примере ниже. Не забывайте ставить точку перед классом!\r\n\r\n[].forEach.call(document.querySelectorAll(\'.bShadow-1, .bShadow-2h, .bShadow-3\'), function(node) {\r\n  var bsh = getComputedStyle(node).boxShadow;\r\n  node.style.boxShadow = &quot;inset &quot; + bsh;\r\n});\r\n\r\nДемо\r\n\r\nГенератор css box-shadow\r\n\r\nКоллекция также подразумевает увеличение количества классов с тенями, созданных самим пользователем. То есть, вы можете использовать классический генератор теней, чтобы дополнять коллекцию своими собственными стилями. Нажав кнопку &laquo;Сохранить и добавить следующий&raquo;, вы можете создавать бесконечное количество классов. Первому сгенерированному и последующим классам присваивается порядковый номер, который не находится в коллекции. Полученные стили можно с легкостью скопировать и вставить в корневой файл css вашего проекта или в файл box-shadows.min.css, созданный на сайте коллекции.\r\n\r\nСейчас планируется расширение коллекции и настройка npm пакета, но с этим есть небольшие затруднения. Поэтому, пока надеюсь на получение ссылки cdnjs и дальнейшее развитие проекта. ', 1, '2018-07-23 21:21:14', '-117957079.jpg', 'small--117957079.jpg', 6, NULL),
(19, '28 июня на Мансарде Rambler&amp;Co состоится пятый внешний RamblerFront&amp; meetup, на котором наши сотрудники и друзья поделятся прикладными знаниями в области frontend-разработки.', '28 июня на Мансарде Rambler&amp;Co состоится пятый внешний RamblerFront&amp; meetup, на котором наши сотрудники и друзья поделятся прикладными знаниями в области frontend-разработки.\r\n\r\nТемы докладов:\r\n\r\n1. Как разогнать сайт до скорости звука &ndash; Денис Красновский (ведущий frontend-разработчик, ДомКлик)\r\nВ погоне за бизнес фичами frontend-разработчики часто забывают о естественных ограничениях web и базовых принципах его работы. В докладе я расскажу о том, как можно значительно увеличить показатели скорости загрузки страницы, не создавая нагрузку на бизнес.\r\n\r\n2. Маршрутизация в большом приложении на React &ndash; Борис Шабанов (руководитель отдела, команда рекламных технологий Rambler&amp;Co)\r\nПоговорим о проблемах, которые могут встречаться при использовании React Router в больших приложениях. А также рассмотрим Router5 &ndash; альтернативный вариант на реально работающем приложении.\r\n\r\n3. Жизнь без Redux Form &ndash; Александр Шаталов (инженер-разработчик клиентских приложений, команда рекламных технологий Rambler&amp;Co)\r\nИз моего доклада вы узнаете, какие есть альтернативы Redux Form. В каких случаях следует использовать Redux для форм, а когда можно обойтись без него и получить выигрыш в производительности.\r\n\r\nМероприятие бесплатное, а регистрация обязательна.\r\n\r\nС нас пицца и чай!\r\n\r\nНачало в 19.00\r\nМесто: Варшавское шоссе, д. 9, стр. 1, подъезд №5. Мансарда Rambler&amp;Co\r\n\r\nimage\r\n\r\nОбязательно зарегистрируйтесь и возьмите с собой паспорт, чтобы вас пропустила охрана бизнес-центра!\r\n\r\nПриходите, будет интересно!', 1, '2018-07-23 21:22:17', '-21298588.jpeg', 'small--21298588.jpeg', 5, NULL),
(20, 'Программа Frontend Conf для тех, у кого нет маховика времени', 'Треть всех докладов на грядущем РИТ++ будет связана с клиентской разработкой, а это почти 40 штук. Естественно, они пойдут в два параллельных специализированных потоках, а наиболее применимые для широкой аудитории &mdash; в главном зале. И вот тут бы и пригодился маховик времени, но похоже, что вместо этого придется решать серьезную задачу максимизации полезности.\r\n\r\nКритерии, естественно, у всех свои, поэтому мы, конечно, не предложим вам готового решения. Но, во-первых, мы стараемся сформировать расписание так, чтобы всегда была возможность для маневра, во-вторых, приготовили краткий гид по докладам.\r\n\r\n\r\n\r\nГлавный зал\r\n\r\nНачнем с выступлений, которые пройдут в главном зале, поскольку они будут доступны широкой аудитории пользователей хабра.\r\nОнлайн трансляцию главного зала смогут посмотреть все желающие, ссылку опубликуем накануне фестиваля в отдельной новости &mdash; не пропустите.\r\nДоклад Камиля Исмагилова из Российской Газеты будет посвящен тонкостям публикации проектов на GitHub. Узнаем, как сделать OpenSource проект интуитивно привычным для разработчиков и как его можно продвигать.\r\n\r\nВместе с Алексеем Охрименко из IPONWEB попробуем определить, что плохого в привычном желании переписывать код, разберемся, как с ним бороться, какие есть подходы к рефакторингу, и чего им можно добиться на примере компьютерной игры.\r\n\r\nНа докладе Тимофея Лавренюка из KeepSolid разберем, как с помощью современных возможностей браузера сделать свое приложение более нативным и дружелюбным для пользователя. Будут примеры применения новейших браузерных API на реальномпроекте, которые покажут, как выделить свое приложение среди конкурентов.\r\n\r\nАлександр Гутников из Badoo планирует поговорить на тему RUM (real user monitoring) и того, как он может помочь современному веб-разработчику делать свою работу лучше и добиваться максимальной производительности приложения.\r\n\r\nДоклад Михаила Башурова из Luxoft будет сопровождатьмифический Иван Тулуп. Рассмотрим, кто это такой, поглядим, чем таски отличаются от микротасок, как браузерыуправляют приоритетами задач и пр. Все это для того, чтобы пользоватьсяасинхронностью Java Script, у которого при этом один поток, и не выстрелить себе в ногу.\r\n\r\nПро доклад Егора Утробина из Mail.ru все и так понятно &mdash; бесценный опыт команды почты Mail.ru по реализации микросервисов на фронтенде для ускорения почти всех этапов процесса разработки. Интересно будет узнать, все ли так радужно, и каких усилий это потребовало.\r\nВ этом месте, перед тем как перейти в секционным докладам, считаем уместным указать ссылку на бронирование билетов.\r\nНовинки\r\n\r\nПоехали дальше. Конференция &mdash; это место, где можно быстро узнать о трендах и новинках. Причем, сразу с аналитикой и картой граблей. Вот, что у нас будет по этой части.\r\n\r\nАктивный участник разработки CSS Fonts 4, Крис Лилли, в своем докладе расскажет про новейшие разработки в области использования вариативных шрифтов (variable fonts) &mdash; формата, который принципиально изменит типографику. Познакомив слушателей с новинками Крис обещает еще и научить, &laquo;как сделать красиво&raquo; с помощью CSS.\r\n\r\nГригорий Петров из Voximplant обещает рассказать про идеи, стоящие за WebRTC, технологией которая в конце прошлого года стала доступна во всех основных браузерах и теперь должна бы убить Flash окончательно.\r\n\r\nЮрий Артюх из Coderiver поведет слушателей за пикселем. То есть поделится историями из реальной жизни реализации нескольких анимаций в браузере. Исследуем способы оптимизации анимаций и рассмотрим возможные альтернативные пути для рисования прямо в браузере.\r\n\r\n\r\n\r\nJavaScript-фреймворки\r\n\r\nКатегория обширная, и начать здесь кажется логичным с истории.\r\n\r\nАнастасия Лопатина (CSSSR) предлагает провести для нас краткий экскурс по эволюции фрэймворков, поскольку это позволит выделить ключевой мотив непрерывного развития и более осознанно выбирать фреймворки.\r\n\r\nДоклад Никиты Мостового из HeadHunter сфокусирован на стеке React-Redux и возможностях middleware в частности. Причем не о redux-thunk, redux-saga и подобных, а кастомных.\r\n\r\nВместе с Андреем Солодовниковым из N1.RU предлагаем разобраться, в страхах и сомнениях разработчиков при выборе Vue.js для большого проекта, и открыть возможности экосистемы этого фрэймворка.\r\n\r\nВиталий Глибин из Хантфлоу не утверждает, что будет легко объяснить бизнесу, почему вам нужно полгода, чтобы все переписать с нуля на этом модном и современном фреймворке. Но предлагает поделиться личным опытом миграции большого и сложного приложения с Backbone на Vue.js.\r\n\r\nЮрий Юрин из Skyeng расскажет о процессе вынесения общего кода в библиотеку и создания UI-kit на AngularJS. Если у вас есть похожая задача, вы сможете сэкономить более 100 часов, которые в Skyeng уже потратили до вас.\r\n\r\nЗар Захаров из Альфа-Банк постарается ответить на вопрос, возможен ли бесшовный переход между нативом и JS-приложением, для каких целей это подходит и есть ли у этого всего будущее.\r\n\r\nElm &mdash; это не фреймворк, а это язык, который компилируется в JavaScript. Но Виктор Русакович из GP Solutions утверждает, что можно переписывать приложение на Elm по частям, оставить только его в приложении и избавиться от AngluarJS или других фреймфорков.\r\n\r\nЭто еще не все, но с остальным вы можете познакомиться самостоятельно &mdash; список принятых докладов можно фильтровать по тегам.\r\n\r\n\r\n\r\nКачество\r\n\r\nВ самом широком смысле этого слова &mdash; это цель каждого профессионала, веб-разработчики не исключение, поэтому в ряде докладов обсуждаются способы улучшить пользовательский опыт вплоть до выбора разработчиком текстового редактора!\r\n\r\nСергей Кригер из SinnerSchrader в своем докладе планирует обсудить ключевые принципы доступности интерфейсов, привести примеры и научить адаптировать рабочий процесс так, чтобы, работая над доступностью, оставаться продуктивными.\r\n\r\nНикита Дубко из iTechArt Group предлагает попробовать найти тот самый &laquo;идеальный&raquo; способ доставки изображений пользователям, попутно автоматизировав все возможные шаги к достижению этой цели.\r\n\r\nИлья Климов из WookieeLabs проанализировал статистику, накопленную многими разработчиками, и готов представить очевидные, неочевидные и совсем контринтуитивные выводы про пользу типизации в мире JavaScript.\r\n\r\nЗарема Халилова из Uploadcare расскажет об опыте разделения фронтенда и монолитного бэкенда начиная от убеждения менеджмента и до итоговой архитектуры. Поговорим о настройке деплоя, процессе разработки и узнаем, почему все остались довольны.\r\n\r\nАнтон Холкин расскажет о crowd source-подходе для удаления неиспользуемого CSS-кода и о том, как при его использовании Booking.com минимизировали негативное воздействие на пользовательский опыт (а в некоторых случаях и избежали).\r\n\r\nДоклад Ивана Ботанова (Домклик) про тесты, что неудивительно в рамках этой секции, но не про привычные юниты, а про е2е. Разберемся, как их писать, поговорим заодно про BDD-подход в тестировании, после чего посмотрим небольшую демку &mdash; приложение, написанное на Angular и тестируемое с помощью этих инструментов.\r\n\r\nАлександра Шинкевич из LOVATA провела небольшой эксперимент, в ходе которого пользовалась несколькими популярными текстовыми редакторами, и хочет поделиться своими впечатлениями от работы в каждом из них. А в конце предложить неожиданные выводы, которые получились на основе проведенного эксперимента.\r\n\r\n\r\n\r\nКажется, на этом пора остановиться. Все равно коротенькие аннотации никак не раскроют тему, а, что будет в самом выступлении, знает только спикер и члены программного комитета, но они будут хранить интригу. Так что приходите, подключайтесь к трансляции и узнайте все до мельчайших подробностей &mdash; именно для этого и нужны кулуары.\r\n\r\nДо встречи в Сколково!', 1, '2018-07-23 21:26:29', '-36182810.jpeg', 'small--36182810.jpeg', 3, NULL);
INSERT INTO `posts` (`id`, `title`, `text`, `author_id`, `date_time`, `post_img`, `post_img_small`, `category`, `update_time`) VALUES
(21, 'День из жизни мобильного разработчика Uber', 'Run Loop &mdash; подкаст про тех, кто делает продукты своими собственными руками. В ближайшие пару месяцев гостями станут разработчики, которые 8 и 9 октября выступят на конференции AppsConf.\r\n\r\nВ первом выпуске гостем стал Максим Ефимов. Под катом его рассказ о собеседовании и работу в Uber, про релокацию в Амстердам (вам тоже захочется туда поехать) и, конечно, про AppsConf.\r\n\r\n\r\n\r\nВедущие: Илья Царев, Алексей Милеев, Роман Бусыгин.\r\n\r\nИлья Царев занимается iOS разработкой в Альфа-банке, выступает на различных митапах и конференциях.\r\n\r\nАлексей Милеев разрабатывает Android версию App in the Air, ведет Telegram-канал по Android разработке, и курирует заявки на доклады на AppsConf.\r\n\r\nРоман Бусыгин &mdash; iOS разработчик в Яндексе, участвовал во множестве выступлений и подкастов, также входит в Программный комитет AppsConf.\r\n\r\nВ гостях Максим Ефимов. Максим работает в Uber, и начнем со знакомства.\r\n\r\nМаксим Ефимов о себе\r\n\r\nМаксим: Я занимаюсь коммерческой разработкой с 2011 года. В Android я ушёл в 2013 году, то есть уже 5 лет назад. До Uber я занимался преимущественно проектной разработкой. Я из города Новосибирска, там я начинал в компании, которая занимается аутсорсингом, потом переехал в Москву, поработал в похожих проектах в основном на российский рынок. Сейчас я уже почти 2 года живу в Амстердаме и работаю в компании Uber. Здесь у нас есть офис разработки, в котором мы в основном занимаемся всем, что связано с платежами. Моя основная роль &mdash; это Android-разработчик в команде, занимающейся поддержкой платежей в приложении для пассажиров. Хотя мы делаем наш Famous Framework, который в принципе используется практически всеми приложениями в инфраструктуре Uber. Я определенную роль играю в развитии этого фреймворка: в том, что мы делаем, как мы делаем, каким образом строятся некоторые процессы. Это мой основной, любимый проект в компании, которым я сейчас занимаюсь.\r\n\r\nПочему Uber\r\n\r\nИлья: Максим, расскажи, пожалуйста, почему именно Uber? Как ты решил, что ты хочешь там работать? Как ты туда пришёл, и вот это всё закрутилось?\r\n\r\nМаксим: Я думал, что ты сейчас начнешь меня спрашивать те же вопросы, которые меня спрашивали на собеседовании. Долгое время мы задавали нашим кандидатам вопрос: &laquo;Почему Uber?&raquo;.\r\n\r\nЧестно говоря, мне хотелось развиваться в какой-то большой компании, где бы я смог расти не только вширь. Аутсорс &mdash; это преимущественно как можно быстрее делать достаточно однотипные вещи. В Uber, да в принципе, так можно сказать практически про любую большую продуктовую компанию, это некоторое развитие вглубь. То есть те вещи, которые в маленьких проектах делаются за месяц, и потом они как-то работают и их поддерживают, в таких компаниях могут делать несколько лет и кратно бо́льшими командами.\r\n\r\nЭто некоторый фазовый сдвиг, когда количество переходит в качество. Количество тех усилий, которые тратит компания на то, чтобы что-то разработать, в итоге создает качественно иной продукт. Не обязательно мы говорим про продукт, как про приложение. Это может быть какая-то библиотека, какой-то уровень стека в разработке или что-то подобное. Это меня очень сильно всегда вовлекало. То есть: как сделать большие вещи; как это организуется технически; как это организуется с точки зрения управления людьми; сколько вообще нужно людей, чтобы такими вещами заниматься.\r\n\r\nUber &mdash; это всё-таки всё ещё самый дорогой и быстрорастущий стартап. Это компания, которая с одной стороны уже зарекомендовала себя на рынке, это известный и узнаваемый бренд. Это не новый стартап, который только-только организовался. С другой стороны, по отзывам, которые я нашел еще до того, как туда устроиться, это компания, в которой еще достаточно мало бюрократизма и корпоративной культуры. С точки зрения духа &mdash; это всё ещё стартап. С точки зрения рынка &mdash; это уже большая устоявшаяся компания.\r\n\r\nК тому же мне очень нравится Амстердам, здесь здорово жить. Так совпало, что я решил, что это очень хорошее предложение и его надо принять.\r\n\r\nАлексей: Ты упомянул, что какое-то время на собеседованиях спрашивали &laquo;Почему Uber?&raquo; Какой был самый популярный ответ?\r\n\r\nМаксим: Это сложный вопрос. Когда я начал проводить собеседование, мы уже практически не задавали этот вопрос. Поэтому у меня нет реальных фактов из моего опыта. Я помню, что говорили другие ребята. Все начинали говорить, что здорово работать в технологической компании, это всё здорово и интересно. Потом их спрашивали: &laquo;Хорошо. А почему не Facebook?&raquo; И тут начиналось самое интересное. Люди говорили, что такого есть в Uber, чего нет в Facebook. Это вопрос, который, как мне кажется, на собеседовании не совсем корректен. Это такое: &laquo;Давайте, похвалите меня, почему вы пришли ко мне&raquo;. Я не помню никаких хороших ответов на этот вопрос, чтобы они были, с одной стороны честные, с другой стороны интересные, чтобы о них рассказывать.\r\n\r\nСобеседование в Uber\r\n\r\nРоман: Максим, с чего все началось? Как обычно, с письма в LinkedIn или это было как-то по-другому?\r\n\r\nМаксим: Да, было письмо в LinkedIn. Единственное, что было необычно это то, что меня нашел непосредственно мой будущий руководитель. То есть это не рекрутеры в поисках людей, а конкретный человек, который потом был, хоть и небольшое время, но моим прямым начальником. Он написал, мы связались. Начался раунд собеседований. Я могу рассказать, если интересно, как это устроено.\r\n\r\nРоман: Да, очень интересно послушать про то, как был устроен процесс интервью.\r\n\r\nМаксим: Он и тогда и сейчас устроен практически одинаково. Поэтому я расскажу последнее, что помню. Сначала человека кто-то находит. Очень большой процент людей, которые сейчас работают в компании, пришли по рекомендации. То есть уже работающие сотрудники компании рекомендуют кого-то и он попадает в систему найма. Но некоторых людей находят просто рекрутеры, проходя по профилям в LinkedIn.\r\n\r\nПосле того, как человека нашли, и стало понятно, что он хоть как-то релевантен открытым позициям, ему написали. Далее идет первичный созвон просто на общую заинтересованность. Первый созвон &mdash; просто познакомиться, спросить, есть ли какой-то интерес в компании или есть вопросы, которые нужно сразу же прояснить.\r\n\r\nПосле этого у нас есть technical phone screening. Это час времени с двумя инженерами, которые общаются с кандидатом на всевозможные технические, касающиеся его специализации, темы. Эта часть интервью строится сильно по-разному, в зависимости от того, на какую именно позицию кандидат претендует. Это backend, мобильные разработчики, data scientist &mdash; все собеседуются чуть-чуть по-разному.\r\n\r\nКонкретно мобильных разработчиков мы обычно спрашиваем некоторые общие вопросы по Software Engineer, немножко Computer Science. Мы просим человека онлайн написать решение не очень тривиальной, но и не олимпиадной задачи, чтобы посмотреть, как человек умеет вживую писать код. Естественно, все понимают, что никто вживую на скорости в редакторе никогда в жизни не пишет код, кроме собеседования. Мы и не хотим тут же увидеть образец промышленного готового какого-то программного продукта, а посмотреть, как вообще человек думает, какие он ставит задачи перед собой, как решает проблемы и как устроен процесс его мышления.\r\n\r\nАлексей: Вот еще про рекрутинг вопрос вдогонку. Насколько часто кандидаты интересуются тем, с чем им придется работать? Насколько большая кодовая база? На каком технологическом стеке выстроена? Много ли legacy? Когда ты проходил в Uber, интересовался ли ты?\r\n\r\nМаксим: Конечно. Это вопрос по большей части &laquo;А что, собственно, придётся делать реально руками?&raquo; Если я правильно тебе сейчас понял, то с чем работать, какими инструментами, какой объем того, что нужно поддерживать. Я интересовался. Когда я устраивался в компанию, это было как раз время активной фазы написания нашего нового приложения для пассажиров, которое запустилось в ноябре 2016 года. Тогда мне на собеседовании открытым текстом сказали, что есть старое приложение. Да, оно legacy и может быть написано не очень хорошо. Но также сказали, что они делают новое приложение.\r\n\r\nВ подробности по технологиям кандидаты тоже довольно часто уходят. Правда, это обычно обсуждается на этапе личного разговора. Если это собеседование проходит хорошо, мы даем небольшое домашнее задание. Так делают только мы, мобильные инженеры. Ни бэкенд ни data science этого не делают. После этого у нас есть раунд собеседований онсайт &mdash; уже на месте. Пять-шесть собеседований в один день. Когда кандидат приезжает в офис и находится там с утра до вечера. Собеседования, естественно, не идут подряд, есть перерывы на отдых и на обед. Это время, чтобы нам узнать кандидата и, чтобы кандидаты узнали компанию. Он общается не только с инженерами, которые могут быть в его команде. Он общается с менеджерами, с инженерами из других команд. Он может составить более полную картину, какими интересными вещами занимаются вообще другие команды, которые ему тоже нравятся.\r\n\r\nРоман: Максим, расскажи, пожалуйста, что было наиболее волнительным за этот этап интервью, за все стадии?\r\n\r\nМаксим: Сейчас у меня впечатление уже несколько смазано, это было уже пару лет назад всё-таки. Я помню, самый волнительный для меня был момент, когда за 2 часа до того, как попасть на собеседование, я опрокинул на себя стакан кофе. Я уже не помню, что было с самими собеседованиями. То ли computer science, то ли архитектура меня там волновала. Но я помню, что весь мой настрой был этим делом сбит. Слава богу, всё прошло хорошо. Мне кажется, никто не заметил или тактично умолчал.\r\n\r\nРоман: В продолжение этого, помнишь ли ты, что тебе помогло пройти это собеседование прямо здорово? Какие знания, какие твои навыки? Что тебе позволило его так четко пройти, как ты думаешь?\r\n\r\nМаксим: Здесь у меня есть мнение, которое не совсем подтверждено фактами. Это, как ты говоришь, то, что я думаю, что мне помогло.\r\n\r\nВо-первых, довольно большое количество времени я провёл на HackerRank, решая разные задачки на все стандартные структуры данных, алгоритмы и прочее, просто набивая руку. Это достаточно полезно, потому что всё-таки такой &laquo;голый&raquo; computer science в повседневной работе встречается не очень часто, и к собеседованию неплохо подготовиться чем-то отдельным.\r\n\r\nВо-вторых, это умение объяснять свои мысли. Решение задач из computer science &mdash; это одно собеседование из пяти-шести, которые предстают перед кандидатом. Другие собеседования &mdash; это, например, разговор про архитектуру, про то, как строятся системы, какие подходы, паттерны, практики использовать. Здесь большую роль играет не ширина и глубина знаний, а то, что ты эти знания можешь донести до собеседника.\r\n\r\nТут два основных момента:\r\n\r\nОпыт. К тому моменту я уже некоторое время работал тимлидом и довольно часто имел дискуссии с членами команды по поводу того, что и как надо делать.\r\nАнглийский язык. Если работаешь в русскоговорящей компании и команде, то довольно сложно бывает перестроиться и объяснять те вещи, которые ты вроде бы знаешь, но затрудняешься сказать это по-английски сказать, чтобы тебя тут же поняли. Для меня это был довольно большой стресс, хотя язык к тому моменту знал неплохо, но говорить на собеседовании &mdash; это был довольно большой челлендж.\r\n\r\nРядовой рабочий день в Uber\r\n\r\nИлья: Максим, ты работаешь в Uber уже приличное время. Расскажи, пожалуйста, как проходит твой рядовой рабочий день. С чего ты начинаешь и как ты заканчиваешь день? Что в обед?\r\n\r\nМаксим: День у меня начинается чуть-чуть за 10:00 утра. У нас не фиксированный рабочий день. Есть какое-то время, когда обычно проводятся все митинги. В зависимости от проекта могут быть какие-то отличия. Но в целом, я прихожу где-то вот в такое время. Первое, что я делаю, я подключаюсь к нашему рабочему VPN, потому что у нас все-все-все артефакты за VPN и забираю те изменения, которые были сделаны за ночь.\r\n\r\nУ нас есть несколько офисов по всему миру, поэтому очень часто бывает, что ты приходишь с утра и видишь историю коммитов гораздо больше чем то, что ты видел в течение дня, потому что как раз проходит рабочий день в Америке, в Сан-Франциско, в Нью-Йорке, где у нас тоже большие офисы. Часто бывает, что если у меня были какие-то незакрытые ветки, то я занимаюсь разрешением merge.\r\n\r\nДальше идет работа в зависимости от того, на каком конкретно я сейчас нахожусь проекте. Я не буду сейчас сильно углубляться в то, как у нас устроена работа команды проекта и так далее. Это будет одна из тем в моём выступлении. Как правило, у нас с утра есть некоторый stand-up. Он может быть не каждый день, например, через день в зависимости от фазы проекта, минут на 10-15. Это небольшой заговор на тему того, кто что делает, какие у кого проблемы, укладываемся мы или нет в график, которые мы сами себе наметили. Если вдруг что-то надо сделать, то решаем, кто это сделает, и когда мы будем проверять результаты этого действия.\r\n\r\nПотом наступает время обеда. Так сложилось, что в Голландии принято обедать довольно рано, и люди в основном на работу приезжают рано. В 12:00 обычно все уже уходят на обед.\r\n\r\nПосле этого лично у меня идёт самая продуктивная фаза, 4-5 часов, когда я занимаюсь текущими задачами. Я иду на борду, смотрю, какие есть задачи, хотя обычно к этому моменту я уже знаю, чем надо заниматься. Делаю новую ветку. В этой ветке делаю какие-то изменения в коде, собираю билд, смотрю, что сломалось, а что нет. Потом отправляю commit на review. Он проходит review. Иногда это бывает прямо сейчас. Иногда, если нужен review от сторонней команды, то это может тянуться день, потому что другая команда, скорее всего, спит, так как находится в другом часовом поясе. После этого, если всё хорошо, commit заливается обратно к мастеру, и все счастливы. Далее перехожу на следующую операцию с новой задачкой.\r\n\r\nРоман: Наверняка ты делаешь какие-то перерывы между задачами, когда тебе нужно подумать или мысль не идет. Наверняка, есть какие-то периоды, когда ты не сидишь перед монитором. Как ты проводишь это время?\r\n\r\nМаксим: Во-первых, у нас классные столы, за которыми можно не только сидеть, но и стоять, иногда даже такое маленькое изменение помогает. Я, честно говоря, не очень люблю какие-то отвлечения по ходу этого концентрированного рабочего дня. С утра пойти попить кофе, вечером посмотреть, как кто-нибудь в FIFA играет в PlayStation, это &mdash; да. Но пока идут задачки, нужно фигачить. Я могу сходить налить воды, может быть, перекинуться парой слов с коллегой, и почти все. Но это просто моё личное предпочтение. Я не умею так работать, чтобы, например, играть в настольный теннис в середине рабочего дня. Мне нужно время для отдыха, время для работы, потом снова время для отдыха.\r\n\r\nРоман: Понятно. Я обратил внимание, что ты в самом начале сказал, что ты подключаешься по VPN. То есть ты, работая в офисе, всё равно пользуешься VPN, чтобы получить доступ к рабочей сети, да?\r\n\r\nМаксим: Частично, через нашу офисную сеть доступны определенные ресурсы, которые недоступны из любой сторонней внешней сети. Но какие-то ресурсы доступны только за VPN. Я не знаю точно, какие причины были в такой политике безопасности. Почему ее приняли, честно говоря, я не разбирался. Удобно тем, что я могу из любого другого места мира, по тому же самому VPN делать все дела, которые делаю в офисе.\r\n\r\nАлексей: Вот смотри, промелькнула такая фраза: &laquo;иду на борду&raquo;. Имеется в виду какой-то task tracker? Если да, то каким вы пользуетесь? Или это реальное физическое место, куда клеятся эти прекрасные стикеры, куда нужно подойти и взять себе следующую таску?\r\n\r\nМаксим: Обычно мы пользуемся task tracker. Мы пользуемся Phabricator. Есть команды, которые любят физические доски, физические стикеры, маркеры. Если придется работать на таком проекте, то, наверное, я буду этим заниматься. Но в принципе, у нас каждая команда организуется по-своему. Иногда бывает, что наша борда, если это совсем маленький проект, может быть табличкой в Excel, чтобы людей сильно не напрягать ведением всей отчетности и прочего.\r\n\r\nЯ в начале сказал про то, что компания &mdash; это всё ещё маленький стартап. Мы всё ещё гибкие в методологии того, как мы делаем свою работу в зависимости от того, какой конкретно у нас сейчас идёт проект, что мы от него хотим.\r\n\r\nАлексей: Вопрос про рабочий процесс. Ты как-то отслеживаешь время, которое ты проводишь непосредственно сидишь и пишешь код? Или может быть у вас это делается централизованно?\r\n\r\nМаксим: Мы никак специально не трекаем время на задачи. Мы смотрим на прогресс по проекту, как он идет. Это уже зависит от того, кто этим проектом руководит. Когда я выступаю в роли лидера проекта, то мне обычно удобнее смотреть по результатам недели. В начале недели мы говорим, что хотим сделать к следующей пятнице, что хотим показать и продемонстрировать. Потом мы смотрим, получилось или нет, разбираем, что пошло не так, почему успели. Если переработали, в смысле, сделаем больше, чем планировали, то тоже выясняем, почему. Я не слышал ни от одной из команд про учет времени в часах того, сколько разработчик и что делал конкретно в какой-нибудь день. Мне кажется, у нас никто этим не занимается.\r\n\r\nИнструменты\r\n\r\nРоман: Я уже не в первый раз слышу, что в Uber пользуются инструментами Facebook, будь то Phabricator, будь то Buck. С чем это связано?\r\n\r\nМаксим: Не могу сказать про глобальную политику. Я даже не уверен, что она есть такая, что давайте будем пользоваться инструментами Facebook. Buck подходит нам по определенным критериям. Там большой проект, время сборки и всё такое. С Phabricator &mdash; не знаю. Это произошло до того, как я пришел в компанию. Я знаю, что некоторые команды пытаются сделать какие-то свои небольшие Jira instance, но это пока всё в духе эксперимента. Команда по-разному пользуется этими инструментами. Какой-то такой глобальной политики, что давайте мы будем использовать всё, что делает Facebook, у нас нет.\r\n\r\nДорога на работу и обратно\r\n\r\nАлексей: Расскажи дальше, что происходит, когда у тебя заканчивается рабочий день. Кстати, во сколько? Это как-то фиксировано по времени?\r\n\r\nМаксим: Обычно я ухожу где-то в 7 с чем-то. Это конкретно мой график, я думаю, что он через некоторое время может измениться в сторону более раннего прихода и ухода. Много людей приходят в 8 и уходят в 5.\r\n\r\nАлексей: Как вообще ты добираешься на работу? Ты ездишь на велосипеде, как истинный голландец?\r\n\r\nМаксим: Я, как истинный голландец, еду на велосипеде до метро и потом на метро еду до работы. У нас сейчас офис находится рядом с очень большим транспортным узлом, и там велосипед просто не нужен. Но до этого я ездил через чудесный амстердамский лес на велосипеде каждый день по 12 км в одну сторону. Это было восхитительно. Я очень скучаю по тому офису именно из-за этой дороги.\r\n\r\nИлья: Сколько примерно времени ты добираешься до работы?\r\n\r\nМаксим: 30-40 минут.\r\n\r\nПро Амстердам\r\n\r\nАлексей: За всё время, что ты прожил в Амстердаме, что больше всего тебе понравилось? Почему именно этот город на твой взгляд? Что самое классное?\r\n\r\nМаксим: Самое классное в Амстердаме &mdash; это его соседний город Харлем, в котором я прожил один год. Это совершенно чудесный маленький городок, который как Амстердам, только там очень мало туристов. Он очень крутой с культурной точки зрения. Несмотря на то, что он маленький, там есть кинотеатры, театры, разные активности, каждые выходные кто-то выступает. Мне очень нравится местный стиль и ритм жизни в смысле того, как люди относятся к своей работе, как они относятся к своей семье. Знаменитый Life Work Balance. Здесь не очень принято &laquo;упахиваться&raquo;. Карьера у большинства людей здесь не на первом месте. С одной стороны у этого есть такой эффект, что иногда, когда тебе нужно что-то прямо сейчас, оказывается, что у компании, которая это делает, 3 дня выходных. С другой стороны, люди, которые тебя окружают, расслаблены и у них всё хорошо. Это вот какая-то магия общества, в котором ты живешь, стоит больше велосипедов, чистых улиц, продуктов. Больше всего мне нравится здесь именно ощущение от того, что люди вокруг довольны жизнью.\r\n\r\nТема на AppsConf\r\n\r\nИлья: Мне прям захотелось побывать в Амстердаме. Мы знаем, что в октябре ты будешь выступать на AppsConf. Расскажи, пожалуйста, немного про тему и то, что ты будешь рассказывать ребятам.\r\n\r\nМаксим: Моя основная тема про то, как вообще работает большая компания, которая занимается разработкой мобильного приложения, и у которой мобильное приложение это основной продукт. Я хочу рассказать, во-первых, про масштаб, сколько людей у нас работает, какие команды, как это всё в итоге сходится в одно приложение.\r\n\r\nЯ хочу рассказать про вещи, связанные с кроссплатформенной архитектурой. Мало того, что работает куча людей и они делают Android приложения, у нас есть ещё iOS приложения. Как эти два предложения работают более-менее одинаково с точностью до деталей, как мы достигаем этого.\r\n\r\nПоследний большой момент из того, что я планирую рассказать, это как в Uber устроена Quality assurance. Это тоже довольно интересный процесс. Когда я пришел работать в большую компанию, мне было очень интересно, как работает большая компания, которая работает над приложением. Хотя я до этого работал в маленьких компаниях, которые делают примерно такие же приложения. Я хочу рассказать про свой опыт, про то, что я увидел в больших компаниях, в Uber, что мне кажется интересным, что можно почерпнуть для компании поменьше или для таких же больших компаний. Есть некоторые интересные вещи, оригинальные решения, которых я увидел в Uber и не видел их до этого. Мне хотелось бы всем этим поделиться.\r\n\r\nПолезность темы на AppsConf\r\n\r\nИлья: Как получилось, что ты решил про это рассказать? В основном, скорее всего, слушатели не работают ещё в таких крупных компаниях. Как это будет им полезно? Как они смогут применить эти знания?\r\n\r\nМаксим: Я отвечу по порядку, как я выбрал эту тему. Я не первый раз выступаю на конференциях и обычно я просто рассказываю про те вещи, которые интересны мне. Я считаю, что если люди прочитали анонс и подумали, что возможно это будет лажа и не пойдут на мое выступление, то, наверное, так и надо. Им просто это не нужно. Но конкретно про это, мне кажется, будет любопытно, во-первых, потому что обычно большие компании рассказывают про какую-то тулзу, которые они сделали, про архитектуру. Я очень люблю рассказывать про архитектуру, но мне кажется, что про процессы будет в данном случае интереснее.\r\n\r\nЧто касается того, как это может помочь другим людям, которые не работали в таких больших компаниях, во-первых, есть вещи, которые всё-таки можно почерпнуть. Тот же самый quality assurance, про который я рассказывал. Если бы я хорошо понимал, как работает эта штука в Uber, то до Uber я, возможно, что-то такое попробовал бы внедрять в своих проектах. Те вещи, которые связаны с работой нескольких команд, это не совсем уникальный случай для больших компаний. Часто бывает даже в небольших аутсорсах, что у тебя есть какая-то команда, которая что-то делает in-house. Есть какая-то команда, которая на аутсорсе делает backend, которая делает мобильные разработки. Вопросы синхронизации не новые, они есть практически везде.\r\n\r\nМодель управления в Uber\r\n\r\nЕще я хочу рассказать про модель управления в Uber, о том формате, в котором работают разные команды друг с другом. У нас в Uber нет менеджеров проектов вообще. Такая роль есть, но такие люди отсутствуют. Это тоже интересная находка, но уже не с точки зрения инженерии, а с точки зрения организации людей. До этого я везде, где работал, были проджект-менеджеры. Везде всё работало примерно по одним и тем же рельсам. А здесь я увидел другой путь, и хотелось бы им поделиться.\r\n\r\nИлья: Звучит достаточно интересно. Мне кажется, это будет достаточно крутой доклад. Я советую всем на него сходить. Я хочу напомнить, что Максим будет выступать на AppsConf в Москве, который пройдет 8-9 октября. Вы можете зайти на сайт Appsconf.ru и посмотреть билеты, пока они стоят не очень дорого. Члены программного комитета уже записывают видеоролики, где рассказывают, о чём будет конференция.\r\n\r\nСпасибо вам, дорогие слушатели и читатели, увидимся в новых выпусках.', 1, '2018-07-23 21:27:45', '-612694372.png', 'small--612694372.png', 2, NULL),
(22, 'Теремок в Нью-Йорке всё', 'Проходил вчера мимо ресторана на Шестой авеню и с удивлением обнаружил, что заведение не работает и внутри пустота. Yelp пишет, что вторая точка в районе Пенн-стейшн тоже перманентно закрыта. А помню, как все начиналось грандиозно.\r\nСтал гуглить и ни нашел об этом никакой информации. Только прошлогоднее интервью владельца сети Михаила Гончарова газете &quot;Деловой Петербург&quot;, где он рассказывает, какая Тесла говно, какой Маск &quot;неприятный хвастунишка&quot;, и что проверку на вшивость они прошли еще в Москве. Из последнего какая-то совершенно непонятная жалоба на работу городского санитарного инспектора, который спрашивал их про Путина.\r\n\r\nЯ, если честно, такому исходу не удивлен ни разу. Во-первых, кухня для Америки (и даже для Нью-Йорка) странная и я был совершенно уверен, что она не приживется. Очень удивился, когда они открыли второй ресторан и даже был готов изменить свое мнение. Во-вторых, был я в этом Теремке однажды и вернуться желания не возникло (такие же эмоции были и у множества моих друзей). Дорого и не сказать, чтобы вкусно. При аналогичном бюджете есть куча мест вокруг, где накормят лучше. И это при том, что я живя в Питере был большим поклонником блинов и часто в их рестораны захаживал.\r\n\r\nЯ всегда радуюсь начинаниям российского/русского бизнеса в Америке. Если это конечно не отмыв ворованного бабла и не временная схема для иммиграции. Мне бы очень хотелось, чтобы он здесь приживался, развивался, нес людям знания, культуру и новые вкусы. Но почитаешь интервью и становится как-то неловко: &quot;еще нужно посмотреть, как Маск закончит. А мы просто работаем&hellip;&quot;. Ну вот зачем это? И почему закрылись, если такие умные?', 1, '2018-07-25 00:18:40', '867485128.jpg', 'small-867485128.jpg', 1, '2018-07-25 21:17:22'),
(23, 'Последний снегопад марта', '&lt;hr /&gt;\r\n&lt;blockquote&gt;\r\n&lt;p&gt;Все начиналось вполне невинно. Утром был легкий снежок, который перешел в очень красивый снежный день, а вот к вечеру навалило так, что половина штата осталась без электричества, дороги были заблокированы, мосты закрыты, а я не смог попасть домой и ночевал у друзей к которым прорывался через снежные заносы.&lt;br /&gt;\r\n&lt;br /&gt;\r\n1. Стоянка грузовиков с мороженным в Куинсе.&lt;/p&gt;\r\n&lt;/blockquote&gt;\r\n\r\n&lt;p&gt;&lt;a href=&quot;localhost/usercontent/blog/349680257.jpg&quot; target=&quot;_self&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;http://project/usercontent/blog/349680257.jpg&quot; style=&quot;height:620px; width:920px&quot; /&gt;&lt;/a&gt;&lt;/p&gt;\r\n', 1, '2018-07-25 22:30:50', '349680257.jpg', 'small-349680257.jpg', 1, '2018-07-25 22:35:57'),
(30, 'Битриксер!!! ', '&lt;p&gt;Нервная работенка!&lt;/p&gt;\r\n', 1, '2018-07-25 23:45:26', '-135865585.jpg', 'small--135865585.jpg', 2, '2018-07-26 14:45:05'),
(31, 'У поста нет картинки, но есть же другие посты', '&lt;p&gt;Текста тоже нет!&lt;/p&gt;\r\n', 1, '2018-07-25 23:46:08', NULL, NULL, 3, '2018-07-26 14:44:42'),
(32, 'tgewtrewr', '&lt;p&gt;gsdgdgdsg&lt;/p&gt;\r\n', 1, '2018-07-26 00:07:02', '983949714.jpg', 'small-983949714.jpg', 3, '2018-07-26 14:42:50');

-- --------------------------------------------------------

--
-- Структура таблицы `skills`
--

CREATE TABLE `skills` (
  `id` int(11) UNSIGNED NOT NULL,
  `html` varchar(191) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  `css` varchar(191) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  `js` varchar(191) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  `jquery` varchar(191) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  `php` varchar(191) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  `mysql` varchar(191) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  `git` varchar(191) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  `gulp` varchar(191) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  `bower` varchar(191) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  `npm` varchar(191) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;

--
-- Дамп данных таблицы `skills`
--

INSERT INTO `skills` (`id`, `html`, `css`, `js`, `jquery`, `php`, `mysql`, `git`, `gulp`, `bower`, `npm`) VALUES
(1, '50', '50', '40', '40', '40', '40', '30', '60', '30', '60');

-- --------------------------------------------------------

--
-- Структура таблицы `users`
--

CREATE TABLE `users` (
  `id` int(11) NOT NULL,
  `email` text NOT NULL,
  `password` varchar(191) DEFAULT NULL,
  `role` varchar(191) DEFAULT NULL,
  `lastname` varchar(191) DEFAULT NULL,
  `city` varchar(191) DEFAULT NULL,
  `country` varchar(191) DEFAULT NULL,
  `firstname` varchar(191) DEFAULT NULL,
  `avatar` varchar(191) DEFAULT NULL,
  `avatar_small` varchar(191) DEFAULT NULL,
  `recovery_code` varchar(191) DEFAULT NULL,
  `recovery_code_times` double DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `users`
--

INSERT INTO `users` (`id`, `email`, `password`, `role`, `lastname`, `city`, `country`, `firstname`, `avatar`, `avatar_small`, `recovery_code`, `recovery_code_times`) VALUES
(1, '123@mail.com', '$2y$10$S8R84DNPX739FhDMZDSVfOOCa2uh4iDctCKFyf0L53UGUajp9ArAq', 'admin', 'Долганов', 'Тюмень', 'Россия', 'Дмитрий', '940542343.jpg', 'small-940542343.jpg', NULL, NULL),
(2, 'inet72@gmail.com', '$2y$10$g9hGCwcivL5tX.3Wl7deu./BwzBoS1xs15zNkjYBzatOzCuk7wrLS', 'user', 'Долганов', 'Тюмень', 'Россия', 'Дмитрий', '71564722.jpg', 'small-71564722.jpg', 'mtkjGF0eviYWM4l', 0),
(3, 'dolganov_dmitrii@mail.ru', '$2y$10$h8KOqWEMWwJYQgyw1jPjk.KHcxQKZX3s2AuNO2HKt.PrRZiYfSZZS', 'user', 'Даздраперма', 'Гавана', 'Куба', 'Перепетуйя', '424338563.jpg', 'small-424338563.jpg', NULL, NULL),
(4, '132434@dfdf.ru', '$2y$10$uRVAOmxiljs4zwqLxSpJle7b7pE15eTis2mJO5lBNIPEcK2leyfBm', 'user', 'Иванов', '', '', 'Дмитрий', NULL, NULL, NULL, NULL);

--
-- Индексы сохранённых таблиц
--

--
-- Индексы таблицы `about`
--
ALTER TABLE `about`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `categories`
--
ALTER TABLE `categories`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `comments`
--
ALTER TABLE `comments`
  ADD PRIMARY KEY (`id`),
  ADD KEY `index_foreignkey_comments_post` (`post_id`),
  ADD KEY `index_foreignkey_comments_user` (`user_id`);

--
-- Индексы таблицы `contacts`
--
ALTER TABLE `contacts`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `jobs`
--
ALTER TABLE `jobs`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `messages`
--
ALTER TABLE `messages`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `posts`
--
ALTER TABLE `posts`
  ADD PRIMARY KEY (`id`),
  ADD KEY `index_foreignkey_posts_author` (`author_id`);

--
-- Индексы таблицы `skills`
--
ALTER TABLE `skills`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `users`
--
ALTER TABLE `users`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT для сохранённых таблиц
--

--
-- AUTO_INCREMENT для таблицы `about`
--
ALTER TABLE `about`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;

--
-- AUTO_INCREMENT для таблицы `categories`
--
ALTER TABLE `categories`
  MODIFY `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=16;

--
-- AUTO_INCREMENT для таблицы `comments`
--
ALTER TABLE `comments`
  MODIFY `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=11;

--
-- AUTO_INCREMENT для таблицы `contacts`
--
ALTER TABLE `contacts`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;

--
-- AUTO_INCREMENT для таблицы `jobs`
--
ALTER TABLE `jobs`
  MODIFY `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=4;

--
-- AUTO_INCREMENT для таблицы `messages`
--
ALTER TABLE `messages`
  MODIFY `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=10;

--
-- AUTO_INCREMENT для таблицы `posts`
--
ALTER TABLE `posts`
  MODIFY `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=33;

--
-- AUTO_INCREMENT для таблицы `skills`
--
ALTER TABLE `skills`
  MODIFY `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;

--
-- AUTO_INCREMENT для таблицы `users`
--
ALTER TABLE `users`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=5;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
